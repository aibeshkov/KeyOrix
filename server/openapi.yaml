openapi: 3.0.3
info:
  title: Secretly API
  description: |
    Secure secrets management API with RBAC, audit logging, and comprehensive secret lifecycle management.
    
    ## Authentication
    All API endpoints (except health check) require Bearer token authentication.
    Include the token in the Authorization header: `Authorization: Bearer <token>`
    
    ## Rate Limiting
    API requests are rate limited. Check response headers for current limits.
    
    ## Versioning
    This API uses URL versioning. Current version is v1: `/api/v1/`
  version: 1.0.0
  contact:
    name: Secretly Team
    email: support@secretly.dev
    url: https://secretly.dev
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: /api/v1
    description: API v1
  - url: https://api.secretly.dev/v1
    description: Production server
  - url: https://staging-api.secretly.dev/v1
    description: Staging server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication

  schemas:
    # Secret schemas
    Secret:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the secret
          example: 1
        name:
          type: string
          description: Name of the secret
          example: "database-password"
        namespace:
          type: string
          description: Namespace the secret belongs to
          example: "production"
        zone:
          type: string
          description: Zone where the secret is stored
          example: "us-east-1"
        environment:
          type: string
          description: Environment the secret is used in
          example: "production"
        type:
          type: string
          description: Type of the secret
          example: "password"
        max_reads:
          type: integer
          nullable: true
          description: Maximum number of times the secret can be read
          example: 10
        expiration:
          type: string
          format: date-time
          nullable: true
          description: When the secret expires
          example: "2025-12-31T23:59:59Z"
        metadata:
          type: object
          description: Additional metadata for the secret
          example: {"owner": "team-backend", "project": "api"}
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the secret
          example: ["database", "production", "critical"]
        created_by:
          type: string
          description: User who created the secret
          example: "admin@example.com"
        created_at:
          type: string
          format: date-time
          description: When the secret was created
          example: "2025-01-17T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the secret was last updated
          example: "2025-01-17T14:30:00Z"

    SecretRequest:
      type: object
      required: [name, value, namespace, zone, environment]
      properties:
        name:
          type: string
          description: Name of the secret
          example: "database-password"
        value:
          type: string
          description: The secret value (will be encrypted)
          example: "super-secret-password"
        namespace:
          type: string
          description: Namespace the secret belongs to
          example: "production"
        zone:
          type: string
          description: Zone where the secret should be stored
          example: "us-east-1"
        environment:
          type: string
          description: Environment the secret is used in
          example: "production"
        type:
          type: string
          description: Type of the secret
          example: "password"
        max_reads:
          type: integer
          description: Maximum number of times the secret can be read
          example: 10
        expiration:
          type: string
          format: date-time
          description: When the secret should expire
          example: "2025-12-31T23:59:59Z"
        metadata:
          type: object
          description: Additional metadata for the secret
          example: {"owner": "team-backend", "project": "api"}
        tags:
          type: array
          items:
            type: string
          description: Tags to associate with the secret
          example: ["database", "production", "critical"]

    SecretValue:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the secret
          example: 1
        name:
          type: string
          description: Name of the secret
          example: "database-password"
        value:
          type: string
          description: The decrypted secret value
          example: "super-secret-password"
        version_number:
          type: integer
          description: Version number of the secret
          example: 1
        read_count:
          type: integer
          description: Number of times this version has been read
          example: 5

    # User schemas
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
          example: 1
        username:
          type: string
          description: Username
          example: "admin"
        email:
          type: string
          format: email
          description: Email address
          example: "admin@example.com"
        created_at:
          type: string
          format: date-time
          description: When the user was created
          example: "2025-01-17T14:30:00Z"

    UserRequest:
      type: object
      required: [username, email, password]
      properties:
        username:
          type: string
          description: Username
          example: "newuser"
        email:
          type: string
          format: email
          description: Email address
          example: "newuser@example.com"
        password:
          type: string
          minLength: 8
          description: Password (minimum 8 characters)
          example: "securepassword123"

    # Role schemas
    Role:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the role
          example: 1
        name:
          type: string
          description: Role name
          example: "admin"
        description:
          type: string
          description: Role description
          example: "Administrator role with full access"

    RoleRequest:
      type: object
      required: [name]
      properties:
        name:
          type: string
          description: Role name
          example: "editor"
        description:
          type: string
          description: Role description
          example: "Editor role with read/write access"

    UserRoleRequest:
      type: object
      required: [user_id, role_id]
      properties:
        user_id:
          type: integer
          description: User ID
          example: 1
        role_id:
          type: integer
          description: Role ID
          example: 2
        namespace_id:
          type: integer
          nullable: true
          description: Optional namespace ID for scoped role assignment
          example: 1

    # Audit schemas
    AuditLog:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the audit log entry
          example: 1
        event_type:
          type: string
          description: Type of event
          example: "SECRET_READ"
        user_id:
          type: integer
          nullable: true
          description: ID of the user who performed the action
          example: 1
        secret_id:
          type: integer
          nullable: true
          description: ID of the secret involved in the action
          example: 1
        description:
          type: string
          description: Description of the event
          example: "Secret accessed via API"
        event_time:
          type: string
          format: date-time
          description: When the event occurred
          example: "2025-01-17T14:30:00Z"
        ip_address:
          type: string
          description: IP address of the client
          example: "192.168.1.100"
        user_agent:
          type: string
          description: User agent of the client
          example: "curl/7.68.0"

    # System schemas
    SystemInfo:
      type: object
      properties:
        version:
          type: string
          description: Application version
          example: "1.0.0"
        build_time:
          type: string
          format: date-time
          description: When the application was built
          example: "2025-01-17T14:30:00Z"
        go_version:
          type: string
          description: Go version used to build the application
          example: "go1.21.0"
        platform:
          type: string
          description: Platform the application is running on
          example: "linux/amd64"
        uptime:
          type: string
          description: How long the application has been running
          example: "2h30m15s"
        environment:
          type: string
          description: Environment the application is running in
          example: "production"
        features:
          type: object
          description: Enabled features
          example: {"rbac": true, "audit_logging": true, "encryption": true}

    # Common schemas
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "ValidationError"
        message:
          type: string
          description: Human-readable error message
          example: "The request is invalid"
        code:
          type: integer
          description: HTTP status code
          example: 400
        details:
          type: object
          description: Additional error details
          example: {"field": "name", "issue": "required"}

    PaginatedResponse:
      type: object
      properties:
        total:
          type: integer
          description: Total number of items
          example: 100
        page:
          type: integer
          description: Current page number
          example: 1
        page_size:
          type: integer
          description: Number of items per page
          example: 20
        total_pages:
          type: integer
          description: Total number of pages
          example: 5

  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
      example: 1

    PageSizeParam:
      name: page_size
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      example: 20

    NamespaceParam:
      name: namespace
      in: query
      description: Filter by namespace
      schema:
        type: string
      example: "production"

    ZoneParam:
      name: zone
      in: query
      description: Filter by zone
      schema:
        type: string
      example: "us-east-1"

    EnvironmentParam:
      name: environment
      in: query
      description: Filter by environment
      schema:
        type: string
      example: "production"

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Unauthorized"
            message: "Authentication required"
            code: 401

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Forbidden"
            message: "Insufficient permissions"
            code: 403

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "NotFound"
            message: "Resource not found"
            code: 404

    ValidationError:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "ValidationError"
            message: "Invalid request data"
            code: 400

paths:
  /health:
    get:
      summary: Health check
      description: Check if the service is healthy
      security: []
      tags: [System]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2025-01-17T14:30:00Z"
                  version:
                    type: string
                    example: "1.0.0"
                  services:
                    type: object
                    example: {"database": "healthy", "encryption": "healthy"}

  /secrets:
    get:
      summary: List secrets
      description: Retrieve a paginated list of secrets with optional filtering
      tags: [Secrets]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - $ref: '#/components/parameters/NamespaceParam'
        - $ref: '#/components/parameters/ZoneParam'
        - $ref: '#/components/parameters/EnvironmentParam'
      responses:
        '200':
          description: List of secrets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      secrets:
                        type: array
                        items:
                          $ref: '#/components/schemas/Secret'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

    post:
      summary: Create secret
      description: Create a new secret
      tags: [Secrets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretRequest'
      responses:
        '201':
          description: Secret created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /secrets/{id}:
    get:
      summary: Get secret
      description: Retrieve a secret by ID, optionally including the decrypted value
      tags: [Secrets]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 1
        - name: include_value
          in: query
          description: Whether to include the decrypted secret value
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: Secret details
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Secret'
                  - $ref: '#/components/schemas/SecretValue'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      summary: Update secret
      description: Update an existing secret
      tags: [Secrets]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretRequest'
      responses:
        '200':
          description: Secret updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Secret'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Delete secret
      description: Delete a secret
      tags: [Secrets]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: Secret deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /secrets/{id}/versions:
    get:
      summary: Get secret versions
      description: Retrieve all versions of a secret
      tags: [Secrets]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Secret versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  versions:
                    type: array
                    items:
                      type: object
                      properties:
                        version_number:
                          type: integer
                        created_at:
                          type: string
                          format: date-time
                        read_count:
                          type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /secrets/{id}/share:
    post:
      summary: Share secret
      description: Share a secret with a user or group
      tags: [Secret Sharing]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID to share
          schema:
            type: integer
          example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareSecretRequest'
      responses:
        '201':
          description: Secret shared successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ShareRecord'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /secrets/{id}/shares:
    get:
      summary: List secret shares
      description: List all shares for a specific secret (owner only)
      tags: [Secret Sharing]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: List of shares for the secret
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          shares:
                            type: array
                            items:
                              $ref: '#/components/schemas/ShareRecord'
                          total:
                            type: integer
                            example: 5
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /secrets/{id}/self-share:
    delete:
      summary: Remove self from share
      description: Allow users to remove themselves from a shared secret
      tags: [Secret Sharing]
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
          example: 123
      responses:
        '204':
          description: Successfully removed from share
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /shares:
    get:
      summary: List user shares
      description: List all shares created by the current user
      tags: [Secret Sharing]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: secret_id
          in: query
          description: Filter by secret ID
          schema:
            type: integer
          example: 123
        - name: recipient_id
          in: query
          description: Filter by recipient ID
          schema:
            type: integer
          example: 456
        - name: permission
          in: query
          description: Filter by permission level
          schema:
            type: string
            enum: [read, write]
          example: read
      responses:
        '200':
          description: List of shares created by the user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          shares:
                            type: array
                            items:
                              $ref: '#/components/schemas/ExtendedShareRecord'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /shares/{id}:
    put:
      summary: Update share permission
      description: Update the permission level for an existing share (owner only)
      tags: [Secret Sharing]
      parameters:
        - name: id
          in: path
          required: true
          description: Share ID
          schema:
            type: integer
          example: 789
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShareRequest'
      responses:
        '200':
          description: Share permission updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/ShareRecord'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      summary: Revoke share
      description: Revoke access to a shared secret (owner only)
      tags: [Secret Sharing]
      parameters:
        - name: id
          in: path
          required: true
          description: Share ID
          schema:
            type: integer
          example: 789
      responses:
        '204':
          description: Share revoked successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /shared-secrets:
    get:
      summary: List shared secrets
      description: List all secrets shared with the current user
      tags: [Secret Sharing]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PageSizeParam'
        - name: permission
          in: query
          description: Filter by permission level
          schema:
            type: string
            enum: [read, write]
          example: read
        - name: owner_id
          in: query
          description: Filter by owner ID
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: List of secrets shared with the user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          secrets:
                            type: array
                            items:
                              $ref: '#/components/schemas/SharedSecret'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

tags:
  - name: System
    description: System health and information endpoints
  - name: Secrets
    description: Secret management operations
  - name: Users
    description: User management operations (RBAC)
  - name: Roles
    description: Role management operations (RBAC)
  - name: Audit
    description: Audit log operations   
 # Secret Sharing schemas
    ShareRecord:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the share
          example: 456
        secret_id:
          type: integer
          description: ID of the shared secret
          example: 123
        owner_id:
          type: integer
          description: ID of the secret owner
          example: 1
        recipient_id:
          type: integer
          description: ID of the recipient (user or group)
          example: 789
        is_group:
          type: boolean
          description: Whether the recipient is a group
          example: false
        permission:
          type: string
          enum: [read, write]
          description: Permission level granted
          example: read
        created_at:
          type: string
          format: date-time
          description: When the share was created
          example: "2025-07-22T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the share was last updated
          example: "2025-07-22T10:30:00Z"
      required:
        - id
        - secret_id
        - owner_id
        - recipient_id
        - permission
        - created_at
        - updated_at

    ShareRequest:
      type: object
      properties:
        recipient_id:
          type: integer
          description: ID of the user or group to share with
          example: 789
        is_group:
          type: boolean
          description: Whether the recipient is a group
          default: false
          example: false
        permission:
          type: string
          enum: [read, write]
          description: Permission level to grant
          example: read
      required:
        - recipient_id
        - permission

    UpdateShareRequest:
      type: object
      properties:
        permission:
          type: string
          enum: [read, write]
          description: New permission level
          example: write
      required:
        - permission

    SharedSecret:
      type: object
      properties:
        id:
          type: integer
          description: Secret ID
          example: 123
        name:
          type: string
          description: Secret name
          example: "Database Password"
        type:
          type: string
          description: Secret type
          example: "password"
        owner_id:
          type: integer
          description: ID of the secret owner
          example: 1
        owner_name:
          type: string
          description: Username of the secret owner
          example: "admin"
        permission:
          type: string
          enum: [read, write]
          description: Your permission level
          example: read
        share_id:
          type: integer
          description: ID of the share record
          example: 456
        shared_at:
          type: string
          format: date-time
          description: When the secret was shared with you
          example: "2025-07-22T10:30:00Z"
        namespace:
          type: string
          description: Secret namespace
          example: "production"
        zone:
          type: string
          description: Secret zone
          example: "us-west-2"
        environment:
          type: string
          description: Secret environment
          example: "prod"

paths:
  # Secret Sharing endpoints
  /secrets/{id}/share:
    post:
      tags:
        - Secret Sharing
      summary: Share a secret
      description: Share a secret with a user or group
      operationId: shareSecret
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareRequest'
            examples:
              share_with_user:
                summary: Share with user (read permission)
                value:
                  recipient_id: 789
                  is_group: false
                  permission: read
              share_with_group:
                summary: Share with group (write permission)
                value:
                  recipient_id: 10
                  is_group: true
                  permission: write
      responses:
        '201':
          description: Secret shared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Secret shared successfully"
                  data:
                    $ref: '#/components/schemas/ShareRecord'
        '400':
          description: Invalid request data
        '403':
          description: Insufficient permissions
        '404':
          description: Secret not found
        '409':
          description: Share already exists

  /secrets/{id}/shares:
    get:
      tags:
        - Secret Sharing
      summary: List secret shares
      description: Get all shares for a specific secret
      operationId: listSecretShares
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: List of shares for the secret
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      shares:
                        type: array
                        items:
                          $ref: '#/components/schemas/ShareRecord'
                      total:
                        type: integer
                        example: 1
        '403':
          description: Insufficient permissions
        '404':
          description: Secret not found

  /secrets/{id}/self-share:
    delete:
      tags:
        - Secret Sharing
      summary: Remove self from share
      description: Remove yourself from a shared secret
      operationId: removeSelfFromShare
      parameters:
        - name: id
          in: path
          required: true
          description: Secret ID
          schema:
            type: integer
            example: 123
      responses:
        '204':
          description: Successfully removed from share
        '403':
          description: Insufficient permissions
        '404':
          description: Secret or share not found

  /shares:
    get:
      tags:
        - Secret Sharing
      summary: List user shares
      description: Get all shares created by the current user
      operationId: listUserShares
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: secret_id
          in: query
          description: Filter by secret ID
          schema:
            type: integer
            example: 123
        - name: permission
          in: query
          description: Filter by permission level
          schema:
            type: string
            enum: [read, write]
            example: read
      responses:
        '200':
          description: List of user shares
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      shares:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/ShareRecord'
                            - type: object
                              properties:
                                secret_name:
                                  type: string
                                  example: "Database Password"
                                recipient_name:
                                  type: string
                                  example: "john.doe"
                      total:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      page_size:
                        type: integer
                        example: 20
                      total_pages:
                        type: integer
                        example: 1

  /shares/{id}:
    put:
      tags:
        - Secret Sharing
      summary: Update share permission
      description: Update the permission level for an existing share
      operationId: updateSharePermission
      parameters:
        - name: id
          in: path
          required: true
          description: Share ID
          schema:
            type: integer
            example: 456
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShareRequest'
            example:
              permission: write
      responses:
        '200':
          description: Share permission updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Share permission updated successfully"
                  data:
                    $ref: '#/components/schemas/ShareRecord'
        '400':
          description: Invalid request data
        '403':
          description: Insufficient permissions
        '404':
          description: Share not found

    delete:
      tags:
        - Secret Sharing
      summary: Revoke share
      description: Remove access to a shared secret
      operationId: revokeShare
      parameters:
        - name: id
          in: path
          required: true
          description: Share ID
          schema:
            type: integer
            example: 456
      responses:
        '204':
          description: Share revoked successfully
        '403':
          description: Insufficient permissions
        '404':
          description: Share not found

  /shared-secrets:
    get:
      tags:
        - Secret Sharing
      summary: List shared secrets
      description: Get all secrets shared with the current user
      operationId: listSharedSecrets
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: page_size
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: permission
          in: query
          description: Filter by permission level
          schema:
            type: string
            enum: [read, write]
            example: read
        - name: owner_id
          in: query
          description: Filter by owner ID
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: List of shared secrets
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      secrets:
                        type: array
                        items:
                          $ref: '#/components/schemas/SharedSecret'
                      total:
                        type: integer
                        example: 1
                      page:
                        type: integer
                        example: 1
                      page_size:
                        type: integer
                        example: 20
                      total_pages:
                        type: integer
                        example: 1

tags:
  - name: Secret Sharing
    description: |
      Secret sharing operations allow users to securely share secrets with other users or groups.
      
      ## Permission Levels
      - **read**: View secret metadata and value
      - **write**: Read permissions plus ability to modify secret content
      
      ## Group Sharing
      Share with groups to automatically grant access to all group members.
      
      ## Security
      All shared secrets maintain end-to-end encryption. Recipients get their own encrypted copy.