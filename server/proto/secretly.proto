syntax = "proto3";

package secretly.v1;

option go_package = "github.com/secretlyhq/secretly/server/proto/pb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Secret service for managing secrets
service SecretService {
  // Create a new secret
  rpc CreateSecret(CreateSecretRequest) returns (Secret);
  
  // Get a secret by ID
  rpc GetSecret(GetSecretRequest) returns (Secret);
  
  // Get secret with decrypted value
  rpc GetSecretValue(GetSecretRequest) returns (SecretValue);
  
  // Update an existing secret
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret);
  
  // Delete a secret
  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty);
  
  // List secrets with filtering and pagination
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);
  
  // Get secret versions
  rpc GetSecretVersions(GetSecretVersionsRequest) returns (GetSecretVersionsResponse);
}

// User service for managing users
service UserService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (User);
  
  // Get a user by ID
  rpc GetUser(GetUserRequest) returns (User);
  
  // Update an existing user
  rpc UpdateUser(UpdateUserRequest) returns (User);
  
  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
  
  // List users with pagination
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
}

// Role service for managing roles and permissions
service RoleService {
  // Create a new role
  rpc CreateRole(CreateRoleRequest) returns (Role);
  
  // Get a role by ID
  rpc GetRole(GetRoleRequest) returns (Role);
  
  // Update an existing role
  rpc UpdateRole(UpdateRoleRequest) returns (Role);
  
  // Delete a role
  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty);
  
  // List roles
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse);
  
  // Assign role to user
  rpc AssignRole(AssignRoleRequest) returns (google.protobuf.Empty);
  
  // Remove role from user
  rpc RemoveRole(RemoveRoleRequest) returns (google.protobuf.Empty);
  
  // Get user roles
  rpc GetUserRoles(GetUserRolesRequest) returns (GetUserRolesResponse);
}

// Audit service for audit logs
service AuditService {
  // Get audit logs
  rpc GetAuditLogs(GetAuditLogsRequest) returns (GetAuditLogsResponse);
  
  // Get RBAC audit logs
  rpc GetRBACAuditLogs(GetRBACAuditLogsRequest) returns (GetRBACAuditLogsResponse);
  
  // Stream audit logs in real-time
  rpc StreamAuditLogs(StreamAuditLogsRequest) returns (stream AuditLog);
}

// System service for system information and health
service SystemService {
  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (HealthResponse);
  
  // Get system information
  rpc GetSystemInfo(google.protobuf.Empty) returns (SystemInfo);
  
  // Get system metrics
  rpc GetMetrics(google.protobuf.Empty) returns (Metrics);
}

// Secret messages
message Secret {
  uint32 id = 1;
  string name = 2;
  string namespace = 3;
  string zone = 4;
  string environment = 5;
  string type = 6;
  optional uint32 max_reads = 7;
  optional google.protobuf.Timestamp expiration = 8;
  map<string, string> metadata = 9;
  repeated string tags = 10;
  string created_by = 11;
  google.protobuf.Timestamp created_at = 12;
  google.protobuf.Timestamp updated_at = 13;
}

message SecretValue {
  uint32 id = 1;
  string name = 2;
  string value = 3;
  uint32 version_number = 4;
  uint32 read_count = 5;
}

message CreateSecretRequest {
  string name = 1;
  string value = 2;
  string namespace = 3;
  string zone = 4;
  string environment = 5;
  optional string type = 6;
  optional uint32 max_reads = 7;
  optional google.protobuf.Timestamp expiration = 8;
  map<string, string> metadata = 9;
  repeated string tags = 10;
}

message GetSecretRequest {
  uint32 id = 1;
  bool include_value = 2;
}

message UpdateSecretRequest {
  uint32 id = 1;
  string name = 2;
  string value = 3;
  string namespace = 4;
  string zone = 5;
  string environment = 6;
  optional string type = 7;
  optional uint32 max_reads = 8;
  optional google.protobuf.Timestamp expiration = 9;
  map<string, string> metadata = 10;
  repeated string tags = 11;
}

message DeleteSecretRequest {
  uint32 id = 1;
}

message ListSecretsRequest {
  optional string namespace = 1;
  optional string zone = 2;
  optional string environment = 3;
  uint32 page = 4;
  uint32 page_size = 5;
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
  uint32 total = 2;
  uint32 page = 3;
  uint32 page_size = 4;
  uint32 total_pages = 5;
}

message GetSecretVersionsRequest {
  uint32 id = 1;
}

message SecretVersion {
  uint32 version_number = 1;
  google.protobuf.Timestamp created_at = 2;
  uint32 read_count = 3;
}

message GetSecretVersionsResponse {
  repeated SecretVersion versions = 1;
}

// User messages
message User {
  uint32 id = 1;
  string username = 2;
  string email = 3;
  google.protobuf.Timestamp created_at = 4;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
}

message GetUserRequest {
  uint32 id = 1;
}

message UpdateUserRequest {
  uint32 id = 1;
  string username = 2;
  string email = 3;
}

message DeleteUserRequest {
  uint32 id = 1;
}

message ListUsersRequest {
  uint32 page = 1;
  uint32 page_size = 2;
}

message ListUsersResponse {
  repeated User users = 1;
  uint32 total = 2;
  uint32 page = 3;
  uint32 page_size = 4;
  uint32 total_pages = 5;
}

// Role messages
message Role {
  uint32 id = 1;
  string name = 2;
  string description = 3;
}

message CreateRoleRequest {
  string name = 1;
  string description = 2;
}

message GetRoleRequest {
  uint32 id = 1;
}

message UpdateRoleRequest {
  uint32 id = 1;
  string name = 2;
  string description = 3;
}

message DeleteRoleRequest {
  uint32 id = 1;
}

message ListRolesRequest {
  uint32 page = 1;
  uint32 page_size = 2;
}

message ListRolesResponse {
  repeated Role roles = 1;
  uint32 total = 2;
  uint32 page = 3;
  uint32 page_size = 4;
  uint32 total_pages = 5;
}

message AssignRoleRequest {
  uint32 user_id = 1;
  uint32 role_id = 2;
  optional uint32 namespace_id = 3;
}

message RemoveRoleRequest {
  uint32 user_id = 1;
  uint32 role_id = 2;
  optional uint32 namespace_id = 3;
}

message GetUserRolesRequest {
  uint32 user_id = 1;
}

message GetUserRolesResponse {
  repeated Role roles = 1;
}

// Audit messages
message AuditLog {
  uint32 id = 1;
  string event_type = 2;
  optional uint32 user_id = 3;
  optional uint32 secret_id = 4;
  string description = 5;
  google.protobuf.Timestamp event_time = 6;
  string ip_address = 7;
  string user_agent = 8;
}

message RBACAuditLog {
  uint32 id = 1;
  string action = 2;
  optional uint32 actor_user_id = 3;
  optional uint32 target_user_id = 4;
  optional uint32 role_id = 5;
  optional uint32 namespace_id = 6;
  string details = 7;
  google.protobuf.Timestamp created_at = 8;
}

message GetAuditLogsRequest {
  optional string event_type = 1;
  optional uint32 user_id = 2;
  optional uint32 secret_id = 3;
  optional google.protobuf.Timestamp start_date = 4;
  optional google.protobuf.Timestamp end_date = 5;
  uint32 page = 6;
  uint32 page_size = 7;
}

message GetAuditLogsResponse {
  repeated AuditLog logs = 1;
  uint32 total = 2;
  uint32 page = 3;
  uint32 page_size = 4;
  uint32 total_pages = 5;
}

message GetRBACAuditLogsRequest {
  optional string action = 1;
  optional uint32 actor_user_id = 2;
  optional uint32 target_user_id = 3;
  uint32 page = 4;
  uint32 page_size = 5;
}

message GetRBACAuditLogsResponse {
  repeated RBACAuditLog logs = 1;
  uint32 total = 2;
  uint32 page = 3;
  uint32 page_size = 4;
  uint32 total_pages = 5;
}

message StreamAuditLogsRequest {
  optional string event_type = 1;
  optional uint32 user_id = 2;
}

// System messages
message HealthResponse {
  string status = 1;
  google.protobuf.Timestamp timestamp = 2;
  string version = 3;
  map<string, string> services = 4;
}

message SystemInfo {
  string version = 1;
  string build_time = 2;
  string go_version = 3;
  string platform = 4;
  string uptime = 5;
  string environment = 6;
  map<string, bool> features = 7;
  DatabaseInfo database = 8;
  EncryptionInfo encryption = 9;
}

message DatabaseInfo {
  string status = 1;
  string type = 2;
  string version = 3;
  uint32 connections = 4;
}

message EncryptionInfo {
  string status = 1;
  string algorithm = 2;
  bool key_rotation_enabled = 3;
}

message Metrics {
  RequestMetrics requests = 1;
  SecretMetrics secrets = 2;
  UserMetrics users = 3;
  PerformanceMetrics performance = 4;
  SystemMetrics system = 5;
}

message RequestMetrics {
  uint64 total = 1;
  uint64 success = 2;
  uint64 errors = 3;
  double avg_duration_ms = 4;
}

message SecretMetrics {
  uint64 total = 1;
  uint64 active = 2;
  uint64 expired = 3;
  uint64 accessed_today = 4;
}

message UserMetrics {
  uint64 total = 1;
  uint64 active = 2;
  uint64 last_login_24h = 3;
}

message PerformanceMetrics {
  double avg_response_time_ms = 1;
  double requests_per_second = 2;
  double error_rate_percent = 3;
  double db_latency_ms = 4;
}

message SystemMetrics {
  double cpu_usage_percent = 1;
  double memory_usage_percent = 2;
  double disk_usage_percent = 3;
  uint32 goroutines = 4;
}